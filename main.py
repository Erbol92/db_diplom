import random

from telebot import types, TeleBot, custom_filters
from telebot.storage import StateMemoryStorage
from telebot.handler_backends import State, StatesGroup
from models import *

from sqlalchemy.orm import sessionmaker
from sqlalchemy import or_
import pandas as pd

DSN = "postgresql://postgres:postgres@localhost:5432/translate_db"
engine = sq.create_engine(DSN)

drop_tables(engine)
create_tables(engine)

csv_files = ['enword.csv', 'ruword.csv']
for file in csv_files:
    df = pd.read_csv(file)
    df.to_sql(file.split('.')[0], con=engine, if_exists='append', index=False)
    print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É `{file.split('.')[0]}`.")

# —Å–µ—Å—Å–∏—è
Session = sessionmaker(bind=engine)
session = Session()
print('Start telegram bot...')

state_storage = StateMemoryStorage()
token_bot = '8134749122:AAFLHf3GHejtlckk6HQneXKl8WfbF0AV4pI'
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    add_word = State()
    del_word = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    cid = message.chat.id
    if cid not in known_users:
        user = session.query(User).filter(User.tg_id == cid).first()
        if user is None:
            session.add(User(tg_id=cid))
            session.commit()
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n"
                         "–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –î–ª—è —ç—Ç–æ–≥–æ\n" "–≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n"
                         "–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n"
                         "—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n"
                         "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è")
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –æ–±—â–∏—Ö + –ª–∏—á–Ω—ã–µ
    target_word = session.query(RuWord).\
        outerjoin(UserRuWords, UserRuWords.ruword_id == RuWord.id).\
        outerjoin(User, User.id == UserRuWords.user_id).\
        filter(or_(User.tg_id == cid, UserRuWords.user_id == None)).all()
    # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    target_word = target_word[random.randint(0, len(target_word)-1)]
    translate = target_word.true_translate  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    target_word_btn = types.KeyboardButton(target_word.title)
    # –±–µ—Ä–µ–º 3 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª —è–∑—ã–∫–µ
    buttons.append(target_word_btn)
    others = session.query(EnWord).all()  # –±—Ä–∞—Ç—å –∏–∑ –ë–î
    random.shuffle(others)
    other_words_btns = [types.KeyboardButton(
        word.title) for word in others[:3]]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data.clear()
        data['target_word'] = target_word.title
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    bot.set_state(message.from_user.id, MyStates.del_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        print(data)
        word = data['target_word']
    cid = message.chat.id
    # –ø–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    words_to_del = session.query(RuWord)\
        .join(UserRuWords, RuWord.id == UserRuWords.ruword_id)\
        .join(User, User.id == UserRuWords.user_id)\
        .filter(RuWord.title == word, User.tg_id == cid).all()
    if words_to_del:
        session.query(UserRuWords).filter(
            UserRuWords.ruword_id == words_to_del[0].id).delete()
        session.commit()
        bot.send_message(message.chat.id, f'{word} —É–¥–∞–ª–µ–Ω–æ')
    else:
        bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ –≤–∞—à–µ —Å–ª–æ–≤–æ')


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(
        message.chat.id, '–≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª. –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    # –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.set_state(message.from_user.id, MyStates.add_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data.clear()
        data['add_word'] = 'add_word'


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data.get('target_word')
        state = data.get('add_word')
        print(target_word, state)
        if state == 'add_word':
            text = message.text.split(' ')
            hint = f'—Å–ª–æ–≤–æ {text[0]}/{text[1]} –¥–æ–±–∞–≤–ª–µ–Ω–æ'
            print(text)
            user = session.query(User).\
                filter(User.tg_id == message.chat.id).first()
            print(user)
            obj = RuWord(title=text[0], true_translate=text[1])
            print(obj)
            user.words.append(obj)
            session.add(user)
            session.commit()
            data['add_word'] = ''
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
            next_btn = types.KeyboardButton(Command.NEXT)
            add_word_btn = types.KeyboardButton(Command.ADD_WORD)
            delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
            buttons.extend([next_btn, add_word_btn, delete_word_btn])
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
